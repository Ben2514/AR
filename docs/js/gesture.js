AFRAME.registerComponent("gesture-handler",{schema:{enabled:{default:!0},rotationFactor:{default:5},minScale:{default:.3},maxScale:{default:8}},init:function(){this.handleScale=this.handleScale.bind(this),this.handleRotation=this.handleRotation.bind(this),this.isVisible=!1,this.initialScale=this.el.object3D.scale.clone(),this.scaleFactor=1,this.el.sceneEl.addEventListener("markerFound",(t=>{this.isVisible=!0})),this.el.sceneEl.addEventListener("markerLost",(t=>{this.isVisible=!1}))},update:function(){this.data.enabled?(this.el.sceneEl.addEventListener("onefingermove",this.handleRotation),this.el.sceneEl.addEventListener("twofingermove",this.handleScale)):(this.el.sceneEl.removeEventListener("onefingermove",this.handleRotation),this.el.sceneEl.removeEventListener("twofingermove",this.handleScale))},remove:function(){this.el.sceneEl.removeEventListener("onefingermove",this.handleRotation),this.el.sceneEl.removeEventListener("twofingermove",this.handleScale)},handleRotation:function(t){this.isVisible&&(this.el.object3D.rotation.y+=t.detail.positionChange.x*this.data.rotationFactor,this.el.object3D.rotation.x+=t.detail.positionChange.y*this.data.rotationFactor)},handleScale:function(t){this.isVisible&&(this.scaleFactor*=1+t.detail.spreadChange/t.detail.startSpread,this.scaleFactor=Math.min(Math.max(this.scaleFactor,this.data.minScale),this.data.maxScale),this.el.object3D.scale.x=this.scaleFactor*this.initialScale.x,this.el.object3D.scale.y=this.scaleFactor*this.initialScale.y,this.el.object3D.scale.z=this.scaleFactor*this.initialScale.z)}}),AFRAME.registerComponent("gesture-detector",{schema:{element:{default:""}},init:function(){this.targetElement=this.data.element&&document.querySelector(this.data.element),this.targetElement||(this.targetElement=this.el),this.internalState={previousState:null},this.emitGestureEvent=this.emitGestureEvent.bind(this),this.targetElement.addEventListener("touchstart",this.emitGestureEvent),this.targetElement.addEventListener("touchend",this.emitGestureEvent),this.targetElement.addEventListener("touchmove",this.emitGestureEvent)},remove:function(){this.targetElement.removeEventListener("touchstart",this.emitGestureEvent),this.targetElement.removeEventListener("touchend",this.emitGestureEvent),this.targetElement.removeEventListener("touchmove",this.emitGestureEvent)},emitGestureEvent(t){const e=this.getTouchState(t),i=this.internalState.previousState,n=i&&e&&e.touchCount==i.touchCount,s=e&&!n;if(i&&!n){const t=this.getEventPrefix(i.touchCount)+"fingerend";this.el.emit(t,i),this.internalState.previousState=null}if(s){e.startTime=performance.now(),e.startPosition=e.position,e.startSpread=e.spread;const t=this.getEventPrefix(e.touchCount)+"fingerstart";this.el.emit(t,e),this.internalState.previousState=e}if(n){const t={positionChange:{x:e.position.x-i.position.x,y:e.position.y-i.position.y}};e.spread&&(t.spreadChange=e.spread-i.spread),Object.assign(i,e),Object.assign(t,i);const n=this.getEventPrefix(e.touchCount)+"fingermove";this.el.emit(n,t)}},getTouchState:function(t){if(0===t.touches.length)return null;const e=[];for(let i=0;i<t.touches.length;i++)e.push(t.touches[i]);const i={touchCount:e.length},n=e.reduce(((t,e)=>t+e.clientX),0)/e.length,s=e.reduce(((t,e)=>t+e.clientY),0)/e.length;i.positionRaw={x:n,y:s};const a=2/(window.innerWidth+window.innerHeight);if(i.position={x:n*a,y:s*a},e.length>=2){const t=e.reduce(((t,e)=>t+Math.sqrt(Math.pow(n-e.clientX,2)+Math.pow(s-e.clientY,2))),0)/e.length;i.spread=t*a}return i},getEventPrefix:t=>["one","two","three","many"][Math.min(t,4)-1]});